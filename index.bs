<pre class="metadata">
Title: Feature Policy
Shortname: feature-policy
Level: 1
Status: CG-DRAFT
Group: WICG
URL: https://wicg.github.io/feature-policy/
Editor: Ian Clelland, Google, iclelland@google.com
Abstract: This specification defines a mechanism that allows developers to selectively enable and disable use of various browser features and APIs.
Repository: https://github.com/wicg/feature-policy/
Markup Shorthands: css no, markdown yes
</pre>
<pre class="link-defaults">
spec:html; type:interface; for:/; text:Document
spec:url; type:dfn; text:origin
spec:fetch; type:dfn; for:Response; text:response
spec:html; type:dfn; for:/; text:browsing context
spec:html; type:element; text:script
spec:html; type:element; text:link
spec:html; type:dfn; for:/; text:global object
spec:html; type:dfn; for:/; text:header list
spec:fetch; type:dfn; text:name
spec:fetch; type:dfn; text:value
</pre>
<section>
  <h2 id="introduction">Introduction</h2>
  <p>The web-platform provides an ever-expanding set of features and APIs,
  offering richer functionality, better developer ergonomics, and improved
  performance. However, a missing piece is the ability for the developer to
  selectively enable, disable, or modify the behavior of some of these browser
  features and APIs within their application:</p>
  <ol>
    <li>The developer may want to selectively *disable* access to certain
    browser features and APIs to "lock down" their application, as a security
    or performance precaution, to prevent own and third-party content executing
    within their application from introducing unwanted or unexpected behaviors
    within their application.</li>
    <li>The developer may want to selectively *enable* access to certain
    browser features and APIs which may be disabled by default - e.g. some
    features may be disabled by default in embedded context unless explicitly
    enabled; some features may be subject to other policy requirements.</li>
    <li>The developer may want to use the policy to assert a promise to a
    client or an embedder about the use—or lack of thereof—of certain features
    and APIs. For example, to enable certain types of "fast path" optimizations
    in the browser, or to assert a promise about conformance with some
    requirements set by other embedders - e.g. various social networks, search
    engines, and so on.</li>
  </ol>
  <p>This specification defines a feature policy mechanism that addresses the
  above use cases.</p>
</section>
<section>
  <h2 id="examples">Examples</h2>
  <div class="example">
    <p>SecureCorp Inc. wants to disable use of Vibration and Geolocation APIs
    within their application. It can do so by delivering the following HTTP
    response header to define a feature policy:</p>
    <pre>
      <a href="#feature-policy-header">Feature-Policy</a>: {"<a>vibrate</a>": [], "<a>geolocation</a>": []}</pre>
    <p>By specifying an empty list of origins, the specified features will be
    disabled for all browsing contexts, regardless of their origin.</p>
  </div>
  <div class="example">
    <p>SecureCorp Inc. wants to disable use of Geolocation API within all
    browsing contexts except for its own origin and those whose origin is
    "<code>https://example.com</code>". It can do so by delivering the
    following HTTP response header to define a feature policy:</p>
    <pre>
      <a href="#feature-policy-header">Feature-Policy</a>: {"<a>geolocation</a>": ["self", "https://example.com"]}</pre>
    <p>The <a>allowlist</a> is a list of one or more origins, which can include
    the application's origin, optionally with the keyword "<code>self</code>",
    and any third-party origin.</p>
  </div>
  <div class="example">
    <p>SecureCorp Inc. is hosting an application on
    "<code>https://example.com</code>" and wants to disable camera and
    microphone input on its own origin but enable it for a whitelisted embedee
    ("<code>https://other.com</code>"). It can do so by delivering the
    following HTTP response header to define a feature policy:</p>
    <pre><a href="#feature-policy-header">Feature-Policy</a>: {"<a>camera</a>": ["https://other.com"], "<a>microphone</a>": ["https://other.com"]}</pre>
    <p>Some features are disabled by default in embedded contexts. The enable
    policy allows the application to selectively enable such features for
    whitelisted origins.</p>
  </div>
  <div class="example">
    <p>FastCorp Inc. wants to disable geolocation for all cross-origin child
    frames, except for a specific iframe. It can do so by delivering the
    following HTTP response header to define a feature policy:</p>
    <pre><a href="#feature-policy-header">Feature-Policy</a>: {"<a>geolocation</a>": ["self"]}</pre>
    <p>and including an "<code>allow</code>" attribute on the iframe
    element:</p>
    <pre>&lt;iframe src="https://other.com/map" <a href="#iframe-allow-attribute">allow</a>="<a>geolocation</a>"&gt;&lt;/iframe&gt;</pre>
    <p>Iframe attributes can selectively enable features in certain frames, and
    not in others, even if those contain documents from the same origin.</p>
  </div>
</section>
<section>
  <h2 id="other-and-related-mechanisms">Other and related mechanisms</h2>
  <p>[[HTML5]] defines a <{iframe/sandbox}> attribute for <{iframe}> elements
  that allows developers to reduce the risk of including potentially untrusted
  content by imposing restrictions on content's abilities - e.g. prevent it
  from submitting forms, running scripts and plugins, and more. The
  [=sandbox=] directive defined by [[CSP2]] extends this capability to any
  resource, framed or not, to ask for the same set of restrictions - e.g. via an
  HTTP response header (<code>Content-Security-Policy: sandbox</code>). These
  mechanisms enable the developer to:</p>
  <ul>
    <li>Set and customize a sandbox policy on any resource via CSP.</li>
    <li>Set and customize individual sandbox policies on each
    <code>iframe</code> element within their application.</li>
  </ul>
  <p>However, there are several limitations to the above mechanism: the
  developer cannot automatically apply a policy across all contexts, which
  makes it hard or impossible to enforce consistently in some cases (e.g. due
  to third-party content injecting frames, which the developer does not
  control); there is no mechanism to selectively enable features that may be
  off by default; the sandbox mechanism uses a whietlist approach which is
  impossible to extend without compatibility risk.</p>
  <p>Feature Policy is intended to be used in combination with the sandbox
  mechanism (i.e. it does not duplicate feature controls already covered by
  sandbox), and provides an extensible mechanism that addresses the above
  limitations.</p>
</section>
<section>
  <h2 id="framwork">Framework</h2>
  <section>
    <h3 id="features">Policy-controlled Features</h3>
    <p>A <dfn export data-lt="policy-controlled feature">policy-controlled feature</dfn>
    is an API or behaviour which can be enabled or disabled in a document or web
    worker by referring to it in a <a>feature policy</a>.
    <div class="note">For brevity, policy-controlled features will often be
    referred to in this document simply as "Features". Unless otherwise
    indicated, the term "feature" refers to <a>policy-controlled features</a>.
    Other specification, defining such features, should use the longer term to
    avoid any ambiguity.</div>
    <p><a>Policy-controlled features</a> have a <dfn>feature name</dfn> keyword,
    which is a token used in <a>policy directives</a>, and a <a>default
    allowlist</a>, which defines whether the <a>policy-controlled feature</a>
    is available to top-level documents, and how access to that feature is
    inherited by cross-origin frames.</p>
    <p>A user agent has a set of <dfn>supported features</dfn>, which is the set
    of <a data-lt="policy-controlled feature">features</a> which it allows to be
    controlled through policies. User agents are not required to support every
    <a data-lt="policy-controlled feature">feature</a>.</p>
    <p>The <a>policy-controlled features</a> themselves are not themselves part
    of this framework. A non-normative list of currently-defined features is
    included as an appendix to this specification.
  </section>
  <section>
    <h3 id="policies">Policies</h3>
    <p>A {{Document}} or {{WorkerGlobalScope}} has a <dfn>feature policy</dfn>,
    which consists of:</p>
    <ul>
      <li>A set of <a data-lt="inherited policy set">inherited policies</a>.
      </li>
      <li>A <a data-lt="declared policy">declared policy</a>.
      </li>
    </ul>
  </section>
  <section>
    <h3 id="inherited-policies">Inherited policies</h3>
    <p>Each document in a frame tree inherits a set of policies from its parent
    frame, or in the case of the top-level document, from the defined defaults
    for each <a>policy-controlled feature</a>. This inherited policy set
    determines the initial state (enabled or disabled) of each feature, and
    whether it can be controlled by a <a>declared policy</a> in the document.
    </p>
    <p>In a {{Document}} in a [=top-level browsing context=], or in a
    {{WorkerGlobalScope}}, the inherited feature set is based on defined
    defaults for each feature.</p>
    <p>In a {{Document}} in a [=nested browsing context=], the inherited feature
    set is based on the parent document's feature policy, as well as any
    <a href="#iframe-allow-attribute">allow attributes</a> defined on the
    browsing context container.</p>
    <p>An <dfn data-lt="inherited policy|inherited policies">inherited
    policy</dfn> declares a <a data-lt="policy-controlled feature">feature</a>
    as Enabled or Disabled.</p>
    <p>An <dfn>inherited policy set</dfn> for a {{Document}} or
    {{WorkerGlobalScope}} is the set of <a>inherited policies</a> for each
    <a data-lt="policy-controlled feature">feature</a> available in that scope.</p>
  </section>
  <section>
    <h3 id="declared-policies">Declared policies</h3>
    <p>A <dfn data-lt="declared policy|declared feature policy">declared
    policy</dfn> is an ordered map from
    <a data-lt="policy-controlled feature">features</a> to <a>allowlists</a>.
    </p>
    <p>A {{Document}} or {{WorkerGlobalScope}} is considered
    <dfn>feature-policy-aware</dfn> if it has a <a>declared policy</a> which is
    not empty.</p>
    <p>A {{Document}} or {{WorkerGlobalScope}} is which is not
    <a>feature-policy-aware</a> is considered
    <dfn>feature-policy-oblivious</dfn>.</p>
  </section>
  <section>
    <h3 id="header-policies">Header policies</h3>
    <p>A <dfn>header policy</dfn> is a list of <a>policy directives</a>
    delivered via an HTTP header with the document. This forms the document's
    <a>feature policy</a>'s <a>declared policy</a>.</p>
  </section>
  <section>
    <h3 id="container-policies">Container policies</h3>
    <p>In addition to the <a>header policy</a>, each frame has a <dfn>container
    policy</dfn>, which is a <a>policy directive</a>, which may be empty. The
    <a>container policy</a> can set by attributes on the browsing context
    container.</p>
    <p>The <a>container policy</a> for a frame influences the <a>inherited
    policy</a> of any document loaded into that frame. (See <a href=
    "#define-inherited-policy"></a>)</p>
    <div class="note">
      Currently, the <a>container policy</a> cannot be set directly, but is
      indirectly set by <code>iframe</code> "<a href=
      "#iframe-allowfullscreen-attribute"><code>allowfullscreen</code></a>",
      "<a href=
      "#iframe-allowpaymentrequest-attribute"><code>allowpaymentrequest</code></a>",
      and "<a href="#iframe-allow-attribute"><code>allow</code></a>"
      attributes. Future revisions to this spec may introduce a mechanism to
      explicitly declare the full <a>container policy</a>.
    </div>
  </section>
  <section>
    <h3 id="policy-directives">Policy directives</h3>
    <p>A <dfn data-lt="policy directive|policy directives">policy
    directive</dfn> is an ordered map, mapping <a>feature names</a> to
    corresponding <a>allowlists</a> of origins.</p>
    <p>A <a>policy directive</a> is represented in HTTP headers and HTML
    attributes as the string serialization of a JSON object.</p>
    <p>The following sections define the set of known <a>feature names</a>.
    Future versions of this document may define additional such names, as user
    agents ignore policy directives with unrecognized names when parsing the
    policy.</p>
  </section>
  <section>
    <h3 id="allowlists">Allowlists</h3>
    <p>A feature policy <dfn lt="allowlist|allowlists">allowlist</dfn> is
    a set of origins. An <a>allowlist</a> may be <em>empty</em>, in which case
    it does not match any origin, or it may contain a list of origins, or it
    may match every origin. When defining an allowlist in a policy, the special
    origin "self" may be used, which refers to the origin of document which the
    policy is associated with.</p>
    <p>An <a>allowlist</a> <dfn>matches</dfn> an origin <var>o</var> if it
    matches every origin, or if it contains an origin which is
    [=same origin-domain=] with <var>o</var>.</p>
  </section>
  <section>
    <h3 id="default-allowlists">Default Allowlists</h3>
    <p>Every <a>policy-controlled feature</a> has a <dfn lt=
    "default allowlist|default allowlists">default allowlist</dfn>, which is an
    <a>allowlist</a>. The <a>default allowlist</a> controls the origins which
    are allowed to access the feature when used in a top-level document with no
    declared policy, and also determines whether access to the feature is
    automatically delegated to child documents.</p>
    <p>Features are currently defined to have one of these three <a>default
    allowlists</a>:</p>
    <dl>
      <dt>["<code>*</code>"]</dt>
      <dd>The feature is allowed at the top level by default, and when allowed,
      is allowed by default to documents in child frames.</dd>
      <dt>["<code>self</code>"]</dt>
      <dd>The feature is allowed at the top level by default, and when allowed,
      is allowed by default to same-origin domain documents in child frames,
      but is disallowed by default in cross-origin documents in child
      frames.</dd>
      <dt>[]</dt>
      <dd>The feature is disallowed at the top level by default, and is also
      disallowed by default to documents in child frames.</dd>
    </dl>
  </section>
</section>
<section>
  <h2 id="serialization">Feature Policy Serialization</h2>
  <section>
    <h3 id="json-serialization">JSON serialization</h3>
    <p><a>Policy Directives</a> are represented in HTTP headers and in HTML
    attributes as JSON text [[!RFC7159]].</p>
    <p><dfn>policy-directive-json</dfn> must match:</p>
    <pre class="railroad">
    Sequence:
      T: [
      ZeroOrMore:
        Sequence:
          T: {
          ZeroOrMore:
            Sequence:
              T: "
              N: feature-name
              T: ": [
              ZeroOrMore:
                Sequence:
                  T: "
                  Choice:
                    N: origin
                    T: self
                    T: *
                  T: "
                T: ,
              T: ]
            T: ,
          T: }
        T: ,
      T: ]
    </pre>
    <p><code>origin</code> is the [=ASCII serialization of an origin=].</p>
    <p><code>feature-name</code> is a JSON string.</p>
    <div class="note">
      The string "<code>self</code>" may be used as an origin in an allowlist.
      When it is used in this way, it will refer to the origin of the document
      which contains the feature policy.
    </div>
    <div class="note">
      The begin-array and end-array marks ("[" and "]") are semantically part
      of the JSON representation of the declared policy, but they do not appear
      in the HTTP headers. Those characters are added to the HTTP headers before
      parsing, so that the entire set of concatenated headers are parsed as a
      single array.
    </div>
  </section>
</section>
<section>
  <h2 id="delivery">Delivery</h2>
  <section>
    <h3 id="feature-policy-http-header-field">Feature-Policy HTTP Header
    Field</h3>
    <p>The <dfn lt="feature-policy-header">Feature-Policy</dfn> HTTP header
    field can be used in the [=response=] (server to client) to communicate the
    <a>feature policy</a> that should be enforced by the client.</p>
    <p>The header's value is the <a href="#json-serialization"></a> of one or
    more <a>policy directive</a>s:.</p>
    <pre class="abnf">
      FeaturePolicy = <a>policy-directive-json</a> *("," <a>policy-directive-json</a>)
    </pre>
    <p>When the user agent receives a <code>Feature-Policy</code> header field,
    it MUST <a href="#process-response-policy">process</a> and <a>enforce</a>
    the serialized policy as described in <a href=
    "#integration-with-html"></a>.</p>
    <div class="note">
    Note that it is not a requirement of this spec that all user agents
    recognize all features, so this "MUST process" does not imply that user
    agents will apply the policy exactly as the origin server intended.
    </div>
  </section>
  <section>
    <h3 id="iframe-allow-attribute">The <code>allow</code> attribute of the
    <code>iframe</code> element</h3>
    <pre class="idl">
partial interface HTMLIFrameElement {
    [CEReactions, SameObject, PutForwards=value] readonly attribute DOMTokenList allow;
};</pre>
    <p><{iframe}> elements have an "<code>allow</code>" attribute, which
    contains an unordered set of unique space-separated tokens that are ASCII
    case-insensitive. The allowed values are names of features. Unrecognized
    values must be ignored.</p>
    <p>When not empty, the "<code>allow</code>" attribute will result in adding
    an <a>allowlist</a> for each recognized
    <a data-lt="policy-controlled feature">feature</a> to the frame's
    <a>container policy</a>, when it is contructed.</p>
    <p>The <a>allowlist</a> will contain a single origin, which is the origin
    of the URL in the iframe's <{iframe/src}> attribute.</p>
  </section>
  <section>
    <h3 id="legacy-attributes">Additional attributes to support legacy
    features</h3>
    <p>Some <a data-lt="policy-controlled feature">features</a> controlled by
    Feature Policy have existing iframe attributes defined. This specification
    redefines these attributes to act as declared policies for the iframe
    element.</p>
    <section>
      <h4 id="iframe-allowfullscreen-attribute">allowfullscreen</h4>
      <p>The "<code>allowfullscreen</code>" iframe attribute controls access to
      {{requestFullscreen()}}.</p>
      <p>If the iframe element has an "<code>allow</code>" attribute whose
      value contains the token "<code>fullscreen</code>", then the
      "<code>allowfullscreen</code> attribute must have no effect.</p>
      <p>Otherwise, the presence of an "allowfullscreen" attribute on an iframe
      will result in adding an <a>allowlist</a> of ["<code>*</code>"] for the
      "fullscreen" feature to the frame's <a>container policy</a>, when it is
      constructed.</p>
      <div class="note">
        This is different from the behaviour of <code>&lt;iframe
        allow="fullscreen"&gt;</code>, and is for compatibility with existing
        uses of <code>allowfullscreen</code>. If
        <code>allow="fullscreen"</code> and <code>allowfullscreen</code> are
        both present on an iframe element, then the more restrictive allowlist
        of <code>allow="fullscreen"</code> will be used.
      </div>
    </section>
    <section>
      <h4 id="iframe-allowpaymentrequest-attribute">allowpaymentrequest</h4>
      <p>The "<code>allowpaymentrequest</code>" iframe attribute controls
      access to [=Payment interface=].</p>
      <p>If the iframe element has an "<code>allow</code>" attribute whose
      value contains the token "<code>payment</code>", then the
      "<code>allowpaymentrequest</code> attribute must have no effect.</p>
      <p>Otherwise, the presence of an "allowpaymentrequest" attribute on an
      iframe will result in adding an <a>allowlist</a> of ["<code>*</code>"] for
      the "payment" feature to the frame's <a>container policy</a>, when it is
      constructed.</p>
      <div class="note">
        This is different from the behaviour of <code>&lt;iframe
        allow="payment"&gt;</code>, and is for compatibility with existing uses
        of <code>allowpaymentrequest</code>. If <code>allow="payment"</code>
        and <code>allowpaymentrequest</code> are both present on an iframe
        element, then the more restrictive allowlist of
        <code>allow="payment"</code> will be used.
      </div>
    </section>
  </section>
</section>
<section>
  <h2 id="integrations">Integrations</h2>
  <p>This document defines a set of algorithms which other specifications will
  use in order to implement the restrictions which Feature Policy defines. The
  integrations are outlined here for clarity, but those external documents are
  the normative references which ought to be consulted for detailed
  information.</p>
  <section>
    <h3 id="integration-with-html">Integration with HTML</h3>
    <ol>
      <li>
        {{Document}} and {{WorkerGlobalScope}} objects have a
        <a>Feature Policy</a>, which is populated via the <a href=
        "#initialize-for-global"></a> algorithm that is called during the
        "Initialising a new <code>Document</code> object" and "Run a Worker"
        algorithms.
      </li>
      <li>Replace the existing step 12 of "Initialising a new
      <code>Document</code> object" with the following step:
        <ul>
          <li>
            <a href="#initialize-for-global">Initialize the feature policy</a>
            for the <code>Document</code>
          </li>
        </ul>
      </li>
      <li>A <a>feature policy</a> is <dfn data-lt="enforce">enforced</dfn> for
      a {{Document}} or {{WorkerGlobalScope}} by setting it as the {{Document}}
      or {{WorkerGlobalScope}}'s <a>Feature Policy</a>.
      </li>
      <li>
        <p>The "[=allowed to use=]" algorithm calls into <a href=
        "#is-feature-enabled"></a>, as follows:</p>
        <ol>
          <li>Replace the current steps #3 and #4 with the following step:
            <ul>
              <li>If <code>Document</code>'s <a>feature policy</a> enables the
              feature indicated by <code>allowattribute</code> for the origin
              of <code>Document</code>, then return true.
              </li>
            </ul>
          </li>
        </ol>
      </li>
    </ol>
    <div class="issue">
      Monkey-patching! As soon as we know that this is the direction we wish to
      pursue, upstream all of this.
    </div>
  </section>
</section>
<section>
  <h2 id="algorithms">Algorithms</h2>
  <section>
    <h3 id="process-response-policy">Process response policy</h3>
    <p>Given a [=response=] (<var>response</var>) and [=global object=]
    (<var>global</var>), this algorithm returns a <a>declared feature
    policy</a>.</p>
    <ol>
      <li>Abort these steps if the <var>response</var>’s [=header list=] does
      not contain a [=header=] whose [=name=] is "<code>Feature-Policy</code>".
      </li>
      <li>Let <var>header</var> be the concatenation of the [=value=]s of all
      [=header=] fields in <var>response</var>’s [=header list=] whose name is
      "<code>Feature-Policy</code>", separated by commas (according to
      [RFC7230, 3.2.2]).</li>
      <li>Add a leading "[" U+005B character, and a trailing "]" U+005D
      character to <var>header</var>.</li>
      <li>Let <var>feature policy</var> be the result of executing <a href=
      "#parse-header"></a> on <var>header</var> and <var>global</var>'s origin.
      </li>
      <li>Return <var>feature policy</var>.</li>
    </ol>
  </section>
  <section>
    <h3 id="parse-header">Parse header from <var>value</var> and
    <var>origin</var></h3>
    <p>Given a string (<var>value</var>) and an [=origin=] (<var>origin</var>)
    this algorithm will return a <a>declared feature policy</a>.</p>
    <ol>
      <li>Let <var>policy</var> be an empty list.</li>
      <li>Let <var>list</var> be the result of parsing <var>value</var> with a
      [=JSON Parser=]. If <var>value</var> cannot be parsed, return
      <var>policy</var>.
      <div class="note">Note: If <var>value</var> can be parsed, <var>list</var>
      must be a valid [=JSON Array=].</div></li>
      <li>For each <var>element</var> of <var>list</var>:
        <ol>
          <li>If <var>element</var> is not a JSON object, then continue.</li>
          <li>Let <var>directive</var> be the result of executing <a href=
          "#parse-policy-directive"></a> on <var>element</var> and
          <var>origin</var>
          </li>
          <li>Run <a href="#merge-directive-with-declared-policy"></a> on <var>
            directive</var> and <var>policy</var>.
          </li>
        </ol>
      </li>
      <li>Return <var>policy</var>.</li>
    </ol>
  </section>
  <section>
    <h3 id="parse-policy-directive">Parse policy directive from
    <var>value</var> and <var>origin</var></h3>
    <p>Given a JSON object (<var>value</var>) and an [=origin=]
    (<var>origin</var>) this algorithm will return a <a>policy
    directive</a>.</p>
    <ol>
      <li>Let <var>directive</var> be an empty ordered map.</li>
      <li>For each <var>key</var> → <var>targetlist</var> of
        <var>value</var>:
        <ol>
          <li>If <var>key</var> is not equal to the name of any recognized
          <a>policy-controlled feature</a>, then continue.</li>
          <li>Let <var>feature</var> be the <a>policy-controlled feature</a>
	  named by <var>key</var>.</li>
          <li>If <var>targetlist</var> is not an array, then continue.</li>
          <li>Let <var>allowlist</var> be a new <a>allowlist</a>.
          </li>
          <li>If <var>targetlist</var> contains the string "<code>*</code>",
          set <var>allowlist</var> to match every origin.</li>
          <li>Otherwise, for each <var>element</var> in <var>targetlist</var>:
            <ol>
              <li>If <var>element</var> is an ASCII case-insensitive match for
              "<code>self</code>", let result be <var>origin</var>.</li>
              <li>Otherwise, let <var>result</var> be the result of executing
              the URL parser on <var>element</var>.</li>
              <li>If <var>result</var> is not failure:
                <ol>
                  <li>Let <var>target</var> be the origin of
                  <var>result</var>.</li>
                  <li>If <var>target</var> is not an opaque origin, append
                  <var>target</var> to <var>allowlist</var>.</li>
                </ol>
              </li>
            </ol>
          </li>
          <li>Set <var>directive</var>[<var>feature</var>] to
	  <var>allowlist</var>.</li>
        </ol>
      </li>
      <li>Return <var>directive</var></li>
    </ol>
  </section>
  <section>
    <h3 id="merge-directive-with-declared-policy">Merge directive with declared
    policy</h3>
    <p>Given a policy direcive (<var>directive</var>) and a declared policy
    (<var>policy</var>), this algorithm will modify <var>policy</var> to
    account for the new directive.</p>
    <ol>
      <li>For each <var>feature</var> → <var>allowlist</var> of
      <var>directive</var>:
        <ol>
          <li>If <var>policy</var> does not contain an allowlist for
          <var>feature</var>, then set <var>policy</var>[<var>feature</var>] to
	  <var>allowlist</var>.</li>
        </ol>
      </li>
    </ol>
  </section>
  <section>
    <h3 id="process-feature-policy-attributes">Process feature policy
    attributes</h3>
    <p>Given an element <var>element</var>, this algorithm returns a
    <a>declared feature policy</a>, which may be empty.</p>
    <ol>
      <li>Let <var>policy</var> be a new <a>policy directive</a>.
      </li>
      <li>Let <var>valid-features</var> be the result of running <a href=
      "#parse-allow-attribute">Parse allow attribute</a> on the value of
        <var>element</var>'s <code>allow</code> attribute.
      </li>
      <li>For each <var>feature</var> in <var>valid-features</var>:
        <ol>
          <li>If <var>policy</var> does not contain an allowlist for
          <var>feature</var>:
            <ol>
              <li>Construct a new declaration for <var>feature</var>, whose
              allowlist is <var>origin</var>.</li>
              <li>Add <var>declaration</var> to <var>policy</var>.</li>
            </ol>
          </li>
        </ol>
      </li>
      <li>If <var>element</var> is an <{iframe}> element:
        <ol>
          <li>If <var>element</var>'s <code>allowfullscreen</code> attribute is
          specified, and <var>policy</var> does not contain an allowlist for
            <a>fullscreen</a>,
            <ol>
              <li>Construct a new declaration for <a>fullscreen</a>, whose
              allowlist matches all origins.
              </li>
              <li>Add <var>declaration</var> to <var>policy</var>.</li>
            </ol>
          </li>
          <li>If <var>element</var>'s <code>allowpaymentrequest</code>
          attribute is specified, and <var>policy</var> does not contain an
          allowlist for <a>payment</a>,
            <ol>
              <li>Construct a new declaration for <a>payment</a>, whose
              allowlist matches all origins.
              </li>
              <li>Add <var>declaration</var> to <var>policy</var>.</li>
            </ol>
          </li>
        </ol>
      </li>
      <li>Return <var>policy</var>.</li>
    </ol>
  </section>
  <section>
    <h3 id="parse-allow-attribute">Parse allow attribute</h3>
    <p>Given a <var>list</var>, this algorithm returns a list of <a>feature
    name keywords</a>, which may be empty.</p>
    <ol>
      <li>Let <var>valid-features</var> be an empty list.</li>
      <li>If <var>list</var> is <code>null</code> or empty, return
      <var>valid-features</var>.</li>
      <li>For each <var>item</var> of <var>list</var>:
        <ol>
          <li>Convert <var>item</var> to ASCII-lowercase.</li>
          <li>If <var>item</var> matches a defined <a>feature name</a> which is
          not present in <var>valid-features</var>,
            <ol>
              <li>Append <var>item</var> to <var>valid-features</var>.</li>
            </ol>
          </li>
        </ol>
      </li>
      <li>Return <var>valid-features</var>.</li>
    </ol>
  </section>
  <section>
    <h3 id="initialize-for-global">Initialize <var>global</var>'s Feature
    Policy from <var>response</var></h3>
    <p>Given a [=response=] (<var>response</var>) and a global object
    (<var>global</var>), this algorithm populates <var>global</var>'s
    <a>Feature Policy</a></p>
    <ol>
      <li>Let <var>inherited policies</var> be a new ordered map.</li>
      <li>Let <var>declared policies</var> be a new ordered map.</li>
      <li>For each <var>feature</var> supported,
        <ol>
          <li>Let <var>isInherited</var> be the result of running <a href=
          "#define-inherited-policy"></a> on <var>feature</var> and
          <var>global</var>.
          </li>
          <li>Set <var>inherited policies</var>[<var>feature</var>] to
            <var>isInherited</var>.</li>
        </ol>
      </li>
      <li>Let <var>d</var> be the result of executing <a href=
      "#process-response-policy"></a> on <var>response</var> and
      <var>global</var>.
      </li>
      <li>For each <var>feature</var> -> <var>allowlist</var> of <var>d</var>:
        <ol>
          <li>If <var>inherited policies</var>[<var>feature</var>] is true, then
	  set <var>declared policies</var>[<var>feature</var>] to
	  <var>allowlist</var>.</li>
        </ol>
      </li>
      <li>Let <var>policy</var> be a new <a>feature policy</a>, with inherited
      policy set <var>inherited policies</var> and declared policy set
      <var>declared policies</var>.
      </li>
      <li>
        <a>Enforce</a> the policy <var>policy</var>.
      </li>
    </ol>
  </section>
  <section>
    <h3 id="define-inherited-policy">Define an inherited policy for
    <var>feature</var></h3>
    <p>Given a string (<var>feature</var>) and a browsing context
    (<var>context</var>), this algorithm returns the <a>inherited policy</a>
    for that feature.</p>
    <ol>
      <li>If <var>context</var> is a [=nested browsing context=]:
        <ol>
          <li>Let <var>parent</var> be <var>context</var>'s parent browsing
          context's active document.</li>
          <li>Let <var>origin</var> be <var>parent</var>'s [=origin=]</li>
          <li>Let <var>container policy</var> be the result of running
            <a href="#process-feature-policy-attributes"></a> on
            <var>context</var>'s browsing context container.
          </li>
          <li>If <var>feature</var> is a key in <var>container policy</var>:
            <ol>
              <li>If the <a>allowlist</a> for <var>feature</var> in
              <var>container policy</var> <a>matches</a> <var>origin</var>, and
              <var>parent</var>'s <a>inherited policy</a> for
              <var>feature</var> is Enabled, return Enabled.
              </li>
              <li>Otherwise return Disabled.</li>
            </ol>
          </li>
          <li>Otherwise, if feature is allowed by <var>parent</var>’s
          <a>feature policy</a> for <var>origin</var>, return Enabled.
          </li>
          <li>Otherwise, return Disabled.</li>
        </ol>
      </li>
      <li>Otherwise, return Enabled.</li>
    </ol>
  </section>
  <section>
    <h3 id="is-feature-enabled">Is <var>feature</var> enabled in
    <var>global</var> for <var>origin</var>?</h3>
    <p>Given a string (<var>feature</var>) and a global object
    (<var>global</var>), and an [=origin=] (<var>origin</var>), this algorithm
    returns "<code>Disabled</code>" if <var>feature</var> should be considered
    disabled, and "<code>Enabled</code>" otherwise.</p>
    <ol>
      <li>Let <var>policy</var> be <var>global</var>'s <a>Feature Policy</a>
      </li>
      <li>If <var>policy</var>'s <a>inherited policy</a> for <var>feature</var>
      is Disabled, return "<code>Disabled</code>".</li>
      <li>If <var>feature</var> is present in <var>policy</var>'s <a>declared
      policy</a>:
        <ol>
          <li>If the <a>allowlist</a> for <var>feature</var> in
          <var>policy</var>'s <a>declared policy</a> <a>matches</a>
          <var>origin</var>, then return "<code>Enabled</code>".
          </li>
          <li>Otherwise return "<code>Disabled</code>".</li>
        </ol>
      </li>
      <li>If <var>feature</var>'s <a>default allowlist</a> is
      <code>["*"]</code>, return "<code>Enabled</code>".
      </li>
      <li>If <var>feature</var>'s <a>default allowlist</a> is
      <code>["self"]</code>, and <var>origin</var> is [=same origin-domain=]
      with <var>global</var>'s active document's origin, return
      "<code>Enabled</code>".
      </li>
      <li>Return "<code>Disabled</code>".</li>
    </ol>
  </section>
</section>
<section>
  <h2 id="iana-considerations">IANA Considerations</h2>
  <p>The permanent message header field registry should be updated with the
  following registration [[!RFC3864]]:</p>
  <dl>
    <dt>Header field name</dt>
    <dd>Feature-Policy</dd>
    <dt>Applicable protocol</dt>
    <dd>http</dd>
    <dt>Status</dt>
    <dd>standard</dd>
    <dt>Author/Change controller</dt>
    <dd>W3C</dd>
    <dt>Specification document</dt>
    <dd>
      <a href="">Feature Policy API</a>
    </dd>
  </dl>
</section>
<section id="privacy" class="informative">
  <h2 id="privacy-and-security">Privacy and Security</h2>
  <p class="issue">TODO</p>
</section>
<section class="appendix">
  <h2 id="defined-features">Appendix A: Policy-Controlled Features</h2>
  <p>This appendix is a reference to currently-defined valid
  <a>policy-controlled features</a>, their <a>feature name</a> keywords, and
  their effect effect when applied via a
  <a data-lt="policy directive">directive</a> as part of a
  <a>feature policy</a>. This reference is non-normative; the actual definitions
  are given in subsections below.</p>
  <div class="issue">
    As soon as possible, move the definitions to their respective controlling
    specifications, and link to those specifications from this one. This spec
    shouldn't be required to enumerate every policy-controlled feature.
  </div>
  <table>
    <thead>
      <tr>
        <th>Feature name</th>
        <th>
          <a>Default allowlist</a>
        </th>
        <th>Brief description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>
          <a>camera</a>
        </td>
        <td><code>self</code></td>
        <td>Controls access to video input devices.</td>
      </tr>
      <tr>
        <td>
          <a>eme</a>
        </td>
        <td><code>self</code></td>
        <td>Controls whether {{requestMediaKeySystemAccess()}} is allowed.</td>
      </tr>
      <tr>
        <td>
          <a>fullscreen</a>
        </td>
        <td><code>self</code></td>
        <td>Controls whether {{requestFullscreen()}} is allowed.</td>
      </tr>
      <tr>
        <td>
          <a>geolocation</a>
        </td>
        <td><code>self</code></td>
        <td>Controls access to [=Geolocation interface=].</td>
      </tr>
      <tr>
        <td>
          <a>microphone</a>
        </td>
        <td><code>self</code></td>
        <td>Controls access to audio input devices.</td>
      </tr>
      <tr>
        <td>
          <a>midi</a>
        </td>
        <td><code>self</code></td>
        <td>Controls access to {{requestMIDIAccess()}} method.</td>
      </tr>
      <tr>
        <td>
          <a>payment</a>
        </td>
        <td><code>self</code></td>
        <td>Controls access to [=PaymentRequest interface=].</td>
      </tr>
      <tr>
        <td>
          <a>speaker</a>
        </td>
        <td><code>self</code></td>
        <td>Controls access to audio output devices.</td>
      </tr>
      <tr>
        <td>
          <a>vibrate</a>
        </td>
        <td><code>self</code></td>
        <td>Controls access to {{vibrate()}} method.</td>
      </tr>
    </tbody>
  </table>
  <section>
    <h3 id="feature-definitions">Feature Definitions</h3>
    <section>
      <h4 id="camera-feature">camera</h4>
      <p>The <dfn>camera</dfn> feature controls access to video input devices
      requested through the [=NavigatorUserMedia interface=]
      ([[MEDIACAPTURE-API]]).</p>
      <p>If disabled in a document, then calls to getUserMedia() MUST NOT grant
      access to video input devices in that document.</p>
      <p>The <a>feature name</a> for <a>camera</a> is "<code>camera</code>"</p>
      <p>The <a>default allowlist</a> for <a>camera</a> is
      <code>["self"]</code>.</p>
    </section>
    <section>
      <h4 id="eme-feature">eme</h4>
      <p>The <dfn>eme</dfn> feature controls whether encrypted media extensions
      [[encrypted-media]] are available.</p>
      <p>If disabled in a document, the promise returned by
      {{requestMediaKeySystemAccess()}} must reject with a NotSupportedError.
      </p>
      <p>The <a>feature name</a> for <a>eme</a> is "<code>eme</code>"</p>
      <p>The <a>default allowlist</a> for <a>eme</a> is
      <code>["self"]</code>.</p>
    </section>
    <section>
      <h4 id="fullscreen-feature">fullscreen</h4>
      <p>The <dfn>fullscreen</dfn> feature controls whether the
      {{requestFullscreen()}} method ([[WHATWG-FULLSCREEN]]) is allowed to
      request fullscreen.</p>
      <p>If disabled in any document, the document will not be allowed to use
      fullscreen. If enabled, the document will be allowed to use
      fullscreen.</p>
      <p>The <a>feature name</a> for <a>fullscreen</a> is
      "<code>fullscreen</code>"</p>
      <p>The <a>default allowlist</a> for <a>fullscreen</a> is
      <code>["self"]</code>.</p>
    </section>
    <section>
      <h4 id="geolocation-feature">geolocation</h4>
      <p>The <dfn>geolocation</dfn> feature controls whether the current
      document is alowed to use the [=Geolocation interface=]
      ([[GEOLOCATION-API]]).</p>
      <p>If disabled in any document, calls to both getCurrentPosition and
      watchPosition must result in the error callback being invoked with
      PERMISSION_DENIED.</p>
      <p>The <a>feature name</a> for <a>geolocation</a> is
      "<code>geolocation</code>"</p>
      <p>The <a>default allowlist</a> for <a>geolocation</a> is
      <code>["self"]</code>.</p>
    </section>
    <section>
      <h4 id="microphone-feature">microphone</h4>
      <p>The <dfn>microphone</dfn> feature controls access to audio input
      devices requested through the [=NavigatorUserMedia interface=]
      ([[MEDIACAPTURE-API]]).</p>
      <p>If disabled in a document, then calls to getUserMedia() MUST NOT grant
      access to audio input devices in that document.</p>
      <p>The <a>feature name</a> for <a>microphone</a> is
      "<code>microphone</code>"
      </p>
      <p>The <a>default allowlist</a> for <a>microphone</a> is
      <code>["self"]</code>.</p>
    </section>
    <section>
      <h4 id="midi-feature">midi</h4>
      <p>The <dfn>midi</dfn> feature controls whether the current document is
      allowed to use the {{requestMIDIAccess()}} method ([[WEBMIDI]]).</p>
      <p>If disabled in a document, the promise returned by requestMIDIAccess
      must reject with a DOMException parameter.</p>
      <p>The <a>feature name</a> for <a>midi</a> is "<code>midi</code>"
      </p>
      <p>The <a>default allowlist</a> for <a>midi</a> is
      <code>["self"]</code>.</p>
    </section>
    <section>
      <h4 id="payment-feature">payment</h4>
      <p>The <dfn>payment</dfn> feature controls whether the current document
      is allowed to use the [=PaymentRequest interface=]
      ([[PAYMENT-REQUEST]]).</p>
      <p>If disabled in a document, then calls to the PaymentRequest constuctor
      MUST throw a SecurityError.</p>
      <p>The <a>feature name</a> for payment is "<code>payment</code>"</p>
      <p>The <a>default allowlist</a> for <a>payment</a> is
      <code>["self"]</code>.</p>
    </section>
    <section>
      <h4 id="speaker-feature">speaker</h4>
      <p>The <dfn>speaker</dfn> feature controls access to audio output devices
      requested through the [=NavigatorUserMedia interface=]
      ([[audio-output]]).</p>
      <p>If disabled in a document, then calls to getUserMedia() MUST NOT grant
      access to audio output devices in that document.</p>
      <p>The <a>feature name</a> for <a>speaker</a> is "<code>speaker</code>"
      </p>
      <p>The <a>default allowlist</a> for <a>speaker</a> is
      <code>["self"]</code>.</p>
    </section>
    <section>
      <h4 id="vibrate-feature">vibrate</h4>
      <p>The <dfn>vibrate</dfn> feature controls whether the {{vibrate()}}
      method ([[VIBRATION]]) is allowed to cause device vibration.</p>
      <p>If disabled in a document, then calls to the {{vibrate()}} method
      should silently do nothing. If enabled, the browser may allow the device
      to vibrate.</p>
      <p>The <a>feature name</a> for <a>vibrate</a> is "<code>vibrate</code>"
      </p>
      <p>The <a>default allowlist</a> for <a>vibrate</a> is
      <code>["self"]</code>.</p>
    </section>
  </section>
</section>
